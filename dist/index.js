"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.weakModels=weakModels,exports.plugin=void 0;const plugin=async(e,o)=>{if(!o.name)throw new Error("option.name is needed to create new weak Model");if(!o.db)throw new Error("option.db is needed to create new weak Model");const{name:t,db:a}=o,s=[];e.childSchemas.forEach(({schema:e,model:o})=>{o.$isArraySubdocument&&e.set("weakModel")&&s.push({subSchema:e,model:o})}),await Promise.all(s.map(async({subSchema:o,model:s})=>{const{path:n}=s,l=`${t}_${n}`,i=o.set("weakModel");let c;switch(console.log("new weak model",t,n),typeof i){case"function":c=await i(o,e,a);break;case"object":c=await i;break;case"boolean":c={}}const{projection:r={},statics:d,methods:p,post:m,extraFields:u,collation:w,position:h,preAggregate:$,postAggregate:g,total:b,set:y,applyPlugins:f=!0}=c||{},_=t.toLowerCase();if(o=o.clone(),f&&(o.$globalPluginsApplied=!1),console.log(o),o.add({[_]:{...e.tree._id,immutable:!0,name:t,ref:t,filter:!0,pos:0,parent:!0}}),y)for(const e in y)console.log("SET",e,y[e]),o.set(e,y[e]);o.static({parentPath:_,parentModel(){return this.model(t)}}),h&&o.add({_position:{type:Number,name:"Nº",pos:1}}),b&&o.add({_total:{type:Number,name:"Tº",pos:2}}),Object.keys(r).forEach(t=>{e.path(t)&&1===r[t]&&o.add({[t]:{...e.tree[t],fromParent:!0}})}),o.method("save",(async function(){const e=await this.constructor.model(t).findById(this[t.toLowerCase()]),o=e[n].id(this._id);return o.set(this),o.$locals=this.$locals,e.$locals=this.$locals,console.log("parent locals",e.$locals),e.save()}),{suppressWarning:!0}),u&&o.add(u),d&&o.static(d),p&&o.method(p),m&&m(o,e,a);const k=e.set("collection")||a.pluralize()(t),M=a.pluralize()(l);let j=[{$project:{[t.toLowerCase()]:"$_id",_id:0,[n]:1,...r,...b?{_total:{$size:"$"+n}}:{}}},{$unwind:{path:"$"+n,includeArrayIndex:"_position",preserveNullAndEmptyArrays:!1}},{$replaceRoot:{newRoot:{$mergeObjects:["$$ROOT","$"+n]}}},{$project:{[n]:0}}];"Human"===h&&j.push({$addFields:{_position:{$add:["$_position",1]}}}),$&&(j=[].concat($,j)),g&&(j=[].concat(j,g));try{await a.connection.dropCollection(M)}finally{await a.connection.createCollection(M,{viewOn:k,pipeline:j,...w?{collation:w}:{}})}a.model(l,o)}))};async function weakModels(e){const{models:o}=e;await Promise.all(Object.keys(o).map(async t=>{await plugin(o[t].schema,{name:t,db:e})}))}exports.plugin=plugin;